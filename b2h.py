import pdb
import jinja2
import re


def key_trim(key):
    output=key.strip()
    if key.startswith('\t'):
        output = key[1:]
    output=output.strip()
    return output
def trim_url(url):
    output = url.strip()[1:-2]
    return output
def trim_bracket(url):
    output = url.strip()[1:-2]
    return output

def trim_title(title):
    output=title.strip()[:-1]
    output=output.strip('""')
    output=output.strip('{}')
    return output
author_re = re.compile(r'.*{([^}]*)}.*')
def trim_authors(authors):
    output = authors.strip()[1:-2]
    #output = output.strip('{}')
    output = output.split(' and ')
    derp = [author_re.match(oot) for oot in output]
    actual_output = "".join(dp.group(1)+ ", " for dp in derp)
    actual_output = actual_output[:-2]

    return actual_output

def parse_journal(key):
    mmm = author_re.match(key)
    expander={}
    expander['\mnras'] = 'MNRAS'
    expander['\pre'] = 'Physical Review E'
    expander['\\apj'] = 'The Astrophysical Journal'
    expander['\\apjl'] = 'The Astrophysical Journal Letters'
    expander['\\apjs'] = 'The Astrophysical Journal Supplement'
    expander['\\aap'] = 'Astronomy and Astrophysics'
    output = expander.get( mmm.group(1),mmm.group(1))
    return output
def nothing(key):
    return key

doers = {'title':trim_title,
         'author':trim_authors,
         'journal':parse_journal,
         'adsurl':trim_url,
         'volume':trim_bracket,
         'number':trim_bracket,
         'pages': trim_bracket}

class record():
    """Simple record that assumes bibtex generated by NASA ADS.
    More general version should use regular expressions."""
    def __init__(self,the_type,name):
        self.the_type=the_type
        self.name=name
        self.items={}
    def eat_line(self,line):
        if '=' in line:
            key, value = line.split('=')
            key = key_trim(key)
            doit = doers.get(key, nothing)
            self.items[key]=doit(value)

def parse_bibtex(fname):
    fptr = open(fname,'r')
    this_record=None
    records={}

    lines = fptr.readlines()
    fptr.close()
    for line in lines:
        if line.startswith('@'):
            sploot = line.split('{')
            the_type = sploot[0][1:]
            name = sploot[1].split(',')[0]

            this_record = record(the_type,name)
            records[name]=this_record
        if this_record is not None:
            this_record.eat_line(line)
    return records

from collections import defaultdict
def get_categories(records):
    records_by_category=defaultdict(list)
    for key in records:
        if 'category' in records[key].items:
            cat= records[key].items['category'].strip().strip('{}')
        else:
            cat = 'Uncategorized'
        records_by_category[cat].append(records[key])
    for cat in records_by_category:
        records_by_category[cat] = sorted( records_by_category[cat], key=lambda
                                          x:x.items['year'], reverse=True)
    return records_by_category



